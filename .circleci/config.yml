version: 2.1

orbs:
  android: circleci/android@3.1.0
  gradle: circleci/gradle@3.0.0

executors:
  android-docker:
    docker:
      - image: cimg/android:2025.04
    resource_class: xlarge
  
  # M4 Pro - 30-50% faster than M2 Pro for builds and tests
  ios-m4pro-medium:
    macos:
      xcode: "16.0.0"
    resource_class: m4pro.medium
  
  # M2 Pro - for performance comparison
  ios-m2pro-medium:
    macos:
      xcode: "16.0.0"
    resource_class: m2pro.medium
  
  ios-executor:
    macos:
      xcode: "15.2.0"
      resource_class: m2pro.large

commands:
  install-android-sdk-manager:
    description: "Install Android SDK Manager"
    parameters:
      cache_prefix:
        type: string
        default: v1-android
      cache_enabled:
        type: boolean
        default: true
    steps:
      - when:
          condition: << parameters.cache_enabled >>
          steps:
            - restore_cache:
                keys:
                  - << parameters.cache_prefix >>-homebrew-{{ .Branch }}
                  - << parameters.cache_prefix >>-homebrew
      - run:
          name: Install Android SDK Manager
          command: |  
            brew install --cask temurin || true
            echo "Temurin installed"
            brew install --cask android-commandlinetools || true  
            echo "Android SDK Manager installed"
            echo 'export PATH=/opt/homebrew/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - when:
          condition: << parameters.cache_enabled >>
          steps:
            - save_cache:
                paths:
                  - /usr/local/Homebrew
                  - ~/Library/Caches/Homebrew
                key: << parameters.cache_prefix >>-homebrew-{{ .Branch }}

  setup-android-sdk:
    description: "Setup Android SDK"
    steps:
      - run:
          name: Set ANDROID_HOME and PATH
          command: |
            echo 'export ANDROID_HOME=/opt/homebrew/share/android-commandlinetools' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT=/opt/homebrew/share/android-commandlinetools' >> $BASH_ENV
            source $BASH_ENV
            echo "ANDROID_HOME: $ANDROID_HOME"
            echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
            echo "PATH: $PATH"
      - run:
          name: Install Android SDK
          command: |
            yes | sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" || if [ $? -ne '141' ]; then exit $?; fi;  #Captures SIGPIPE 141 error but still allow repeating "y" to accept all licenses
            echo "Android SDK installed"
      - run:
          name: Accept Android SDK Licenses
          command: |
            yes | sdkmanager --licenses || if [ $? -ne '141' ]; then exit $?; fi;  #Captures SIGPIPE 141 error but still allow repeating "y" to accept all licenses

jobs:
  # Shared module build supports multiple apps - like Compass's architecture with shared code across 4 apps
  shared_build:
    executor: ios-executor
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      # - run:
      #     name: Force Fail Shared Build
      #     command: |
      #       echo "Failing shared_build job intentionally!"
      #       exit 1
      - checkout
      - install-android-sdk-manager:
          cache_prefix: v1-android
      - setup-android-sdk
      - android/restore_gradle_cache:
          cache_prefix: v6-shared
      - run:
          name: Build shared module for all platforms
          command: |
            ./gradlew :shared:build :shared:test
      - android/save_gradle_cache:
          cache_prefix: v6-shared
      - store_artifacts:
          path: shared/build/reports
          destination: shared-module-reportse
      # - store_test_results:
      #     path: shared/build/test-results
      - store_artifacts:
          path: build/reports/configuration-cache
          destination: configuration-cache-report
      - persist_to_workspace:
          root: .
          paths:
            - shared/build
            - shared/src
            - .gradle

  android_build_and_test:
    executor: android-docker
    steps:
      - checkout
      - attach_workspace:
          at: .
      - android/restore_build_cache
      - android/restore_gradle_cache:
          cache_prefix: v6-android
      - run:
          name: Build and test Android app
          command: ./gradlew androidApp:assembleDebug androidApp:testDebugUnitTest
      - android/save_build_cache
      - android/save_gradle_cache:
          cache_prefix: v6-android
      # - store_artifacts:
      #     path: androidApp/build/reports/tests
      #     destination: android-test-reports
      - store_artifacts:
          path: androidApp/build/outputs/apk
          destination: android-apk
      # - store_test_results:
      #     path: androidApp/build/test-results

  ios_build_and_test:
    executor: ios-executor
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-gem-cache-{{ arch }}
            - v1-gem-cache
      - run:
          name: Install xcpretty
          command: |
            gem install xcpretty
      - save_cache:
          paths:
            - ~/.gem
          key: v1-gem-cache-{{ arch }}
      - run:
          name: Build iOS app
          command: |
            xcodebuild -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              build
      - run:
          name: Run iOS tests
          command: |
            set -o pipefail && \
            xcodebuild test -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
              -destination-timeout 60 \
              IPHONEOS_DEPLOYMENT_TARGET=14.0 | xcpretty --report junit --output iosApp/iosApp/build/junit.xml
      - store_test_results:
          path: iosApp/iosApp/build/junit.xml
      - store_artifacts:
          path: iosApp/iosApp/build/junit.xml
          destination: ios-junit-report
      - run:
          name: Zip iOS app bundle
          command: |
            cd derivedData/Build/Products/Debug-iphonesimulator
            zip -r iosApp.app.zip iosApp.app
      - store_artifacts:
          path: derivedData/Build/Products/Debug-iphonesimulator/iosApp.app.zip
          destination: ios-app

  # Parallel UI testing with intelligent test splitting - handles Compass's 22 shard requirement
  ios_ui_tests_parallel:
    executor: ios-m4pro-medium
    parallelism: 22
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-gem-cache-{{ arch }}
            - v1-gem-cache
      - run:
          name: Install xcpretty
          command: |
            gem install xcpretty
      - save_cache:
          paths:
            - ~/.gem
          key: v1-gem-cache-{{ arch }}
      - run:
          name: Run UI tests with timing-based test splitting
          command: |
            set -o pipefail && \
            xcodebuild test -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
              -destination-timeout 60 \
              IPHONEOS_DEPLOYMENT_TARGET=14.0 | \
              circleci tests split --split-by=timings --timings-type=classname | \
              xcpretty --report junit --output iosApp/iosApp/build/junit.xml
      - store_test_results:
          path: iosApp/iosApp/build/junit.xml
      - store_artifacts:
          path: iosApp/iosApp/build/junit.xml
          destination: ui-test-results

  # M4 Pro build - demonstrating performance gains
  ios_build_m4pro:
    executor: ios-m4pro-medium
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-gem-cache-{{ arch }}
            - v1-gem-cache
      - run:
          name: Install xcpretty
          command: |
            gem install xcpretty
      - save_cache:
          paths:
            - ~/.gem
          key: v1-gem-cache-{{ arch }}
      - run:
          name: Build iOS app on M4 Pro
          command: |
            xcodebuild -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              build
      - run:
          name: Run iOS tests
          command: |
            set -o pipefail && \
            xcodebuild test -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
              -destination-timeout 60 \
              IPHONEOS_DEPLOYMENT_TARGET=14.0 | xcpretty --report junit --output iosApp/iosApp/build/junit.xml
      - store_test_results:
          path: iosApp/iosApp/build/junit.xml

  # M2 Pro build - for performance comparison with M4 Pro
  ios_build_m2pro:
    executor: ios-m2pro-medium
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-gem-cache-{{ arch }}
            - v1-gem-cache
      - run:
          name: Install xcpretty
          command: |
            gem install xcpretty
      - save_cache:
          paths:
            - ~/.gem
          key: v1-gem-cache-{{ arch }}
      - run:
          name: Build iOS app on M2 Pro
          command: |
            xcodebuild -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              build
      - run:
          name: Run iOS tests
          command: |
            set -o pipefail && \
            xcodebuild test -workspace iosApp/iosApp.xcodeproj/project.xcworkspace \
              -scheme iosApp \
              -sdk iphonesimulator \
              -configuration Debug \
              -derivedDataPath ./derivedData \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
              -destination-timeout 60 \
              IPHONEOS_DEPLOYMENT_TARGET=14.0 | xcpretty --report junit --output iosApp/iosApp/build/junit.xml
      - store_test_results:
          path: iosApp/iosApp/build/junit.xml

  # Deploy using your own tools - no forced Fastlane or CircleCI-specific tooling required
  deploy:
    parameters:
      environment:
        type: string
        default: "Mobile Apps"
      component_name:
        type: string
        default: "KMM-RSS-Reader"
      deploy_type:
        type: enum
        enum: ["ios", "android"]
        default: "ios"
      app_name:
        type: string
        default: "Compass"
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Determine version from source
          command: |
            if [ "<< parameters.deploy_type >>" = "android" ]; then
              VERSION=$(grep versionName androidApp/build.gradle.kts | head -1 | awk -F'"' '{print $2}')
            elif [ "<< parameters.deploy_type >>" = "ios" ]; then
              VERSION=$(grep -A1 CFBundleShortVersionString iosApp/iosApp/Info.plist | tail -1 | sed -E 's/.*<string>(.*)<\/string>.*/\1/')
            else
              echo "Unknown deploy_type: << parameters.deploy_type >>" && exit 1
            fi
            echo "VERSION=$VERSION" >> $BASH_ENV
      - run:
          name: Plan deployment
          command: |
            circleci run release plan << parameters.deploy_type >>-<< pipeline.id >> \
              --environment-name="<< parameters.environment >>" \
              --component-name=<< parameters.component_name >> \
              --target-version=$VERSION
      - run:
          name: Update planned deployment to running
          command: |
            circleci run release update << parameters.deploy_type >>-<< pipeline.id >> --status=running
      - run:
          name: Simulate code signing
          command: |
            echo "Simulating code signing for << parameters.component_name >> on << parameters.deploy_type >>..."
            sleep 5
            echo "Code signing complete."
      - run:
          name: Simulate Store deployment
          command: |
            if [ "<< parameters.deploy_type >>" = "android" ]; then
              echo "Deploying Android app to Play Store..."
            else
              echo "Deploying iOS app to App Store..."
            fi
            sleep 5
            echo "Deployment complete."
      - run:
          name: Update planned deployment to SUCCESS
          command: |
            circleci run release update << parameters.deploy_type >>-<< pipeline.id >> --status=SUCCESS
          when: on_success
      - run:
          name: Update planned deployment to FAILED
          command: |
            circleci run release update << parameters.deploy_type >>-<< pipeline.id >> --status=FAILED
          when: on_fail

workflows:
  # Compass demo workflow - showcasing M4 Pro performance, parallel testing, and multi-app support
  build_and_test:
    jobs:
      - shared_build:
          name: Shared Module Build
      
      - android_build_and_test:
          name: Android Build and Test
          requires:
            - "Shared Module Build"
      
      # M4 vs M2 Pro comparison - run in parallel to show performance difference
      - ios_build_m4pro:
          name: iOS Build (M4 Pro)
          requires:
            - "Shared Module Build"
      
      - ios_build_m2pro:
          name: iOS Build (M2 Pro)
          requires:
            - "Shared Module Build"
      
      # Parallel UI testing with 22 shards and intelligent test splitting
      - ios_ui_tests_parallel:
          name: iOS UI Tests (22 Parallel Shards)
          requires:
            - "iOS Build (M4 Pro)"
      
      # Multi-app deployment matrix - demonstrates support for multiple apps like Compass's 4-app architecture
      - deploy:
          name: "Deploy << matrix.app_name >> << matrix.deploy_type >>"
          matrix:
            parameters:
              environment: ["Mobile Apps"]
              app_name: ["Compass", "Glide"]
              component_name: ["Compass-ios", "Compass-android", "Glide-ios", "Glide-android"]
              deploy_type: ["ios", "android"]
            exclude:
              - component_name: "Compass-ios"
                deploy_type: "android"
              - component_name: "Compass-android"
                deploy_type: "ios"
              - component_name: "Compass-ios"
                app_name: "Glide"
              - component_name: "Compass-android"
                app_name: "Glide"
              - component_name: "Glide-ios"
                deploy_type: "android"
              - component_name: "Glide-android"
                deploy_type: "ios"
              - component_name: "Glide-ios"
                app_name: "Compass"
              - component_name: "Glide-android"
                app_name: "Compass"
          requires:
            - "Android Build and Test"
            - "iOS Build (M4 Pro)"